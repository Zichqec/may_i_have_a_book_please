//—————————————————————————————— Installing something ——————————————————————————————
//https://ukagakadreamteam.github.io/ukadoc/manual/list_shiori_event.html#OnInstallBegin

OnInstallComplete
{
	"\0\s[0]Installed %(reference1) (%(reference0))."
	--
	//A little menu to open or change to the ghost that was installed immediately
	if "ghost" _in_ reference0
	{
		"\n\n\_q"
		--
		"\![*]\__q[OnInstallComplete.Action,call]Call %(reference0)\__q  \![*]\__q[OnInstallComplete.Action,change]Change to %(reference0)\__q\n\n"
		--
		"\![*]\q[Thanks,blank]"
	}
}

OnInstallComplete.Action
{
	if reference0 == "change"
	{
		"\![change,ghost,lastinstalled]"
	}
	else //call
	{
		"\![call,ghost,lastinstalled]"
	}
}

OnInstallFailure
{
	_reason = reference0
	case reference0
	{
		when "unlha32"; _reason = "could not load the dll to decompress lzh files"
		when "extraction"; _reason = "failed to decompress the file"
		when "invalid type"; _reason = "the install.txt is incorrect"
		when "unsupported"; _reason = "the archive is not supported"
		when "password"; _reason = "incorrect password"
		when "artificial"; _reason = "canceled by user"
	}
	
	"\0\s[0]Could not complete installation: %(_reason)."
}


//—————————————————————————————— Creating a .nar file ——————————————————————————————
//https://ukagakadreamteam.github.io/ukadoc/manual/list_shiori_event.html#OnNarCreating

OnNarCreated
{
	//Makes a clickable link that'll open the location of the file they just made
	_nar = "\_a[OnNarLocation,""%(reference1)""]%(reference0)\_a"
	
	"\0\s[0]Successfully created %(_nar)."
}

OnNarLocation
{	
	_path = SPLITPATH(reference0)[0] + SPLITPATH(reference0)[1]
	
	"\![open,file,""%(_path)""]"
}


//—————————————————————————————— SNTP (clock fixing) ——————————————————————————————
//https://ukagakadreamteam.github.io/ukadoc/manual/list_shiori_event.html#OnSNTPBegin

OnSNTPCompare
{
	if reference3 != 0
	{
		_s = ""; if reference3 != 1; _s = "s"
		
		"\0\s[0]The clock is off by %(reference3) second%(_s).\n\n"
		--
		"\![*]\q[Fix it,script:\6]  \![*]\q[Leave it,blank]"
	}
	else
	{
		"\0\s[0]The clock is accurate."
	}
}

OnSNTPCorrect
{
	"\0\s[0]The clock has been corrected."
}

OnSNTPFailure
{
	"\0\s[0]Could not correct the clock."
}


//—————————————————————————————— BIFF (Email check) ———————————————————————————————
//https://ukagakadreamteam.github.io/ukadoc/manual/list_shiori_event.html#OnBIFFBegin

OnBIFFFailure
{
	_reason = reference0
	case reference0
	{
		when "timeout"; _reason = "connection timed out"
		when "kick"; _reason = "can't access account"
		when "defect"; _reason = "POP settings incorrect"
		when "artificial"; _reason = "canceled by user"
	}

	"\0\s[0]Could not get emails: %(_reason)."
}


//———————————————————————————————— Headlines/RSS ——————————————————————————————————
//https://ukagakadreamteam.github.io/ukadoc/manual/list_shiori_event.html#OnHeadlinesenseBegin

OnHeadlinesenseFailure
{
	_reason = reference0
	case reference0
	{
		when "can't download"; _reason = "can't download the file"
		when "can't analyze"; _reason = "can't analyze the file"
	}

	"\0\s[0]Could not get RSS: %(_reason)."
}